<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Curl</name>
    </assembly>
    <members>
        <member name="T:Cake.Curl.Arguments.ConcatenatedArgument">
            <summary>
            Represents a composite argument made up of
            a concatenated sequence of arguments.
            </summary>
        </member>
        <member name="M:Cake.Curl.Arguments.ConcatenatedArgument.#ctor(Cake.Core.IO.IProcessArgument[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Curl.Arguments.ConcatenatedArgument"/> class.
            </summary>
            <param name="arguments">The sequence of arguments to concatenate.</param>
        </member>
        <member name="M:Cake.Curl.Arguments.ConcatenatedArgument.Render">
            <inheritdoc />
        </member>
        <member name="M:Cake.Curl.Arguments.ConcatenatedArgument.RenderSafe">
            <inheritdoc />
        </member>
        <member name="T:Cake.Curl.Arguments.NameValueArgument">
            <summary>
            Represents an argument that consists of
            a name and a value separated by a character.
            </summary>
        </member>
        <member name="M:Cake.Curl.Arguments.NameValueArgument.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Curl.Arguments.NameValueArgument"/> class.
            </summary>
            <param name="name">The name part of the argument.</param>
            <param name="separator">The separator between the name and the value.</param>
            <param name="value">The textual value part of the argument.</param>
        </member>
        <member name="M:Cake.Curl.Arguments.NameValueArgument.#ctor(System.String,System.String,Cake.Core.IO.IProcessArgument)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Curl.Arguments.NameValueArgument"/> class.
            </summary>
            <param name="name">The name part of the argument.</param>
            <param name="separator">The separator between the name and the value.</param>
            <param name="value">The value part of the argument.</param>
        </member>
        <member name="T:Cake.Curl.CurlAliases">
            <summary>
            <para>
            Contains aliases related to <see href="https://curl.haxx.se">curl</see>.
            </para>
            <para>
            In order to use the commands for this add-in, a version of curl will need
            to be installed on the machine where the Cake script is being executed.
            While curl is usually included in most Unix-based operating systems, you
            will likely have to install it yourself on Windows.
            The Windows version of curl is also part of <see href="https://www.cygwin.com">Cygwin</see>.
            </para>
            <code>
            #addin Cake.Curl
            </code>
            </summary>
        </member>
        <member name="M:Cake.Curl.CurlAliases.CurlDownloadFile(Cake.Core.ICakeContext,System.Uri)">
            <summary>
            Downloads the file from the specified remote URL to the working directory.
            </summary>
            <param name="context">The Cake context.</param>
            <param name="host">The URL of the file to download.</param>
            <example>
            <code>
            CurlDownloadFile(new Uri("http://host/file"));
            </code>
            </example>
        </member>
        <member name="M:Cake.Curl.CurlAliases.CurlDownloadFile(Cake.Core.ICakeContext,System.Uri,Cake.Curl.CurlDownloadSettings)">
            <summary>
            Downloads the file from the specified remote URL.
            </summary>
            <remarks>
            By default, curl is going to download the file to the working directory
            using the same name as on the remote host.
            If you want to put the file into a different directory, you can set the
            <see cref="P:CurlDownloadSettings.WorkingDirectory"/> property accordingly.
            If you want to rename the downloaded file, you can do so by specifying the
            output path for the file at the remote URL in the
            <see cref="P:CurlDownloadSettings.OutputPaths"/> property.
            </remarks>
            <param name="context">The Cake context.</param>
            <param name="host">The URL of the file to download.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            CurlDownloadFile(new Uri("http://host/file"), new CurlDownloadSettings
            {
                OutputPaths = new FilePath[] { "output/path" }
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Curl.CurlAliases.CurlDownloadFiles(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            Downloads the files from the specified remote URLs to the working directory.
            </summary>
            <param name="context">The Cake context.</param>
            <param name="hosts">The URLs of the files to download.</param>
            <example>
            <code>
            CurlDownloadFiles(new Uri[]
            {
                new Uri("http://host/file"),
                new Uri("http://host/anotherfile")
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Curl.CurlAliases.CurlDownloadFiles(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.Uri},Cake.Curl.CurlDownloadSettings)">
            <summary>
            Downloads the files from the specified remote URLs.
            </summary>
            <remarks>
            By default, curl is going to download the files to the working directory
            using the same names as on the remote host.
            If you want to put the files into a different directory, you can set the
            <see cref="P:CurlDownloadSettings.WorkingDirectory"/> property accordingly.
            If you want to rename the downloaded files, you can do so by specifying the
            output paths for each of the files at the remote URLs in the
            <see cref="P:CurlDownloadSettings.OutputPaths"/> property.
            In that case, the order of the output paths is going to be matched with
            the order of the remote URLs.
            </remarks>
            <param name="context">The Cake context.</param>
            <param name="hosts">The URLs of the files to download.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            CurlDownloadFiles(
                new Uri[]
                {
                    new Uri("http://host/file"),
                    new Uri("http://host/anotherfile")
                },
                new CurlDownloadSettings
                {
                    OutputPaths = new FilePath[]
                    {
                        "output/path",
                        "another/output/path"
                    }
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Curl.CurlAliases.CurlUploadFile(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.Uri)">
            <summary>
            Uploads the specified file to a remote host using the specified URL.
            </summary>
            <param name="context">The Cake context.</param>
            <param name="filePath">The path of the file to upload.</param>
            <param name="host">The URL of the host to upload the file to.</param>
            <example>
            <code>
            CurlUploadFile("file.txt", new Uri("http://host/path"));
            </code>
            </example>
        </member>
        <member name="M:Cake.Curl.CurlAliases.CurlUploadFile(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.Uri,Cake.Curl.CurlSettings)">
            <summary>
            Uploads the specified file to a remote host using the specified URL.
            </summary>
            <param name="context">The Cake context.</param>
            <param name="filePath">The path of the file to upload.</param>
            <param name="host">The URL of the host to upload the file to.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            CurlUploadFile(
                "file.txt",
                new Uri("ftps://host/path"),
                new CurlSettings
                {
                    Username = "username",
                    Password = "password"
                });
            </code>
            </example>
        </member>
        <member name="T:Cake.Curl.CurlDownloadRunner">
            <summary>
            The curl runner to download files from remote URLs.
            </summary>
        </member>
        <member name="M:Cake.Curl.CurlDownloadRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.Tooling.IToolLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Curl.CurlDownloadRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="tools">The tool locator.</param>
        </member>
        <member name="M:Cake.Curl.CurlDownloadRunner.DownloadFile(System.Uri,Cake.Curl.CurlDownloadSettings)">
            <summary>
            Downloads the file from the specified remote URL.
            </summary>
            <param name="host">The URL of the file to download.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Curl.CurlDownloadRunner.DownloadFiles(System.Collections.Generic.IEnumerable{System.Uri},Cake.Curl.CurlDownloadSettings)">
            <summary>
            Downloads the files from the specified remote URLs.
            </summary>
            <param name="hosts">The URLs of the files to download.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Curl.CurlDownloadRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="M:Cake.Curl.CurlDownloadRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="T:Cake.Curl.CurlDownloadSettings">
            <summary>
            Contains the settings used by curl when downloading
            one or more files from remote URLs.
            </summary>
        </member>
        <member name="P:Cake.Curl.CurlDownloadSettings.OutputPaths">
            <summary>
            Gets or sets the sequence of local <see cref="T:Cake.Core.IO.FilePath"/>
            where to save the downloaded files.
            </summary>
            <remarks>
            When downloading multiple files, curl will match the order in which
            the remote URLs are specified with the order of the paths in this property.
            </remarks>
        </member>
        <member name="P:Cake.Curl.CurlDownloadSettings.CreateDirectories">
            <summary>
            Gets or sets a value indicating whether curl should create the directory
            hierarchy specified in the <see cref="P:Cake.Curl.CurlDownloadSettings.OutputPaths"/> locally.
            </summary>
            <remarks>
            If one of the <see cref="P:Cake.Curl.CurlDownloadSettings.OutputPaths"/> doesn't mention a directory at all
            or if the specified directory already exists, this option will just be ignored.
            </remarks>
        </member>
        <member name="T:Cake.Curl.CurlSettings">
            <summary>
            Contains the settings used by curl.
            </summary>
        </member>
        <member name="P:Cake.Curl.CurlSettings.Verbose">
            <summary>
            Gets or sets a value indicating whether to enable verbose output.
            </summary>
        </member>
        <member name="P:Cake.Curl.CurlSettings.ProgressBar">
            <summary>
            Gets or sets a value indicating whether to display a simple progress bar
            instead of the standard progress meter.
            </summary>
            <remarks>
            By default, curl displays a progress meter during its operations. This meter
            contains information such as the amount of transferred data, transfer speed
            and the estimated time left. When the <see cref="P:ProgressBar"/> property
            is set to <see langword="true"/>, curl displays a single line of <em>#</em>
            characters instead. This may be preferable when running the build script
            in a terminal where we want to keep the amount of output to a minimum.
            </remarks>
        </member>
        <member name="P:Cake.Curl.CurlSettings.Username">
            <summary>
            Gets or sets the username to use when authenticating to the remote host.
            </summary>
        </member>
        <member name="P:Cake.Curl.CurlSettings.Password">
            <summary>
            Gets or sets the password to use when authenticating to the remote host.
            </summary>
        </member>
        <member name="P:Cake.Curl.CurlSettings.Headers">
            <summary>
            Gets or sets the header to use when communicating to the remote host.
            </summary>
        </member>
        <member name="P:Cake.Curl.CurlSettings.RequestCommand">
            <summary>
            Gets or sets the command to use in the request.
            </summary>
            <remarks>
            The set of commands that are considered valid for a particular request
            depends on the protocol used to talk to the remote service.
            For an HTTP request any valid HTTP method—such as <code>PUT</code>, <code>GET</code>,
            <code>POST</code> and <code>DELETE</code>—will do. Other protocols might have
            their own set of commands; for example, FTP has <code>LIST</code>
            while WebDAV supports <code>COPY</code>.
            Note that specifying the command using this option will simply set
            the word in the request and won't change curl's behavior in any way.
            If curl already has a dedicated option to perform a particular operation,
            it's almost always better to use that option instead of specifying the command directly,
            since that will make sure that curl behaves accordingly.
            For example, in order to send an HTTP <code>HEAD</code> request, setting the <code>"HEAD"</code>
            command in the request isn't enough. In that case, the dedicated <code>-I --head</code> option
            is a far better choice.
            </remarks>
        </member>
        <member name="P:Cake.Curl.CurlSettings.FollowRedirects">
            <summary>
            Gets or sets a value indicating whether to follow HTTP redirects.
            </summary>
            <remarks>
            If the remote service responds with a 3xx status code and this flag
            is set to <see langword="true"/>, curl will redo the request
            to the URL found in the <code>Location</code> response header.
            Note that if the remote service responded with a <code>301</code> (<em>Moved Permanently</em>),
            <code>302</code> (<em>Found</em>) or <code>303</code> (<em>See Other</em>) status code,
            curl will redo the request using the <code>GET</code> method, even if the original request
            was using another method (like for example <code>PUT</code> or <code>POST</code>).
            For all other 3xx status codes, curl will redo the request using the same method
            as the one specified in the original request.
            </remarks>
        </member>
        <member name="P:Cake.Curl.CurlSettings.Fail">
            <summary>
            Gets or sets a value indicating whether HTTP errors should result in a non-zero exit code.
            </summary>
            <remarks>
            When HTTP servers fail to fulfill a request, they will often return an HTML page with the error information to the client.
            In situations like these, curl's default behavior is to send the content of the error page to <code>stdout</code> and exit with a zero exit code, indicating success.
            While this may be fine at the command line, it's quite problematic in scripts where it can lead to false positives.
            Setting this property to <see langword="true"/>, tells curl to treat HTTP errors (4xx and 5xx) as failed operations
            and to exit with status code <code>22</code> instead of <code>0</code>.
            Cake will then pick up the non-successful status code and turn it into a runtime exception.
            Note that, according to <a href="https://curl.haxx.se/docs/manpage.html#-f">curl's documentation</a>, this method is not completely fail-safe
            and there are occasions where non-successful response codes (especially those related to authentication, like <code>401</code>
            and <code>407</code>) will slip through.
            </remarks>
        </member>
        <member name="P:Cake.Curl.CurlSettings.RetryCount">
            <summary>
            Gets or sets the number of times curl should retry a failed operation before giving up.
            Setting this property to <em>zero</em> means no retries. This is the default value.
            <seealso cref="P:Cake.Curl.CurlSettings.RetryDelaySeconds"/>
            <seealso cref="P:Cake.Curl.CurlSettings.RetryMaxTimeSeconds"/>
            <seealso cref="P:Cake.Curl.CurlSettings.RetryOnConnectionRefused"/>
            </summary>
            <remarks>
            According to <a href="https://curl.haxx.se/docs/manpage.html#--retry">curl's documentation</a>,
            the kinds of errors that qualify for a retry are:
            <list type="bullet">
            <item>
            <description>Timeouts</description>
            </item>
            <item>
            <description>FTP 4xx responses</description>
            </item>
            <item>
            <description>HTTP <code>408</code> or 5xx responses</description>
            </item>
            </list>
            This option can be further tweaked with <see cref="P:Cake.Curl.CurlSettings.RetryDelaySeconds"/> and <see cref="P:Cake.Curl.CurlSettings.RetryMaxTimeSeconds"/>.
            </remarks>
        </member>
        <member name="P:Cake.Curl.CurlSettings.RetryDelaySeconds">
            <summary>
            Gets or sets the amount of time curl should wait before retrying a failed operation.
            Setting this property to <em>zero</em> means using curl's own exponential wait algorithm. This is the default value.
            <seealso cref="P:Cake.Curl.CurlSettings.RetryCount"/>
            </summary>
            <remarks>
            According to <a href="https://curl.haxx.se/docs/manpage.html#--retry">the documentation</a>, curl's default wait
            algorithm is to wait <em>one</em> second after the first failure and then double the previous waiting time
            for all subsequent retries until it reaches <em>ten</em> minutes; after that, <em>ten</em> minutes is going to be
            used for all retries until the operation either succeeds, is cancelled by the user or the <see cref="P:Cake.Curl.CurlSettings.RetryMaxTimeSeconds"/>
            is reached.
            </remarks>
        </member>
        <member name="P:Cake.Curl.CurlSettings.RetryMaxTimeSeconds">
            <summary>
            Gets or sets the maximum amount of time during which curl should retry a failed operation.
            Setting this property to <em>zero</em> means retrying without a time limit. This is the default value.
            <seealso cref="P:Cake.Curl.CurlSettings.RetryCount"/>
            <seealso cref="P:Cake.Curl.CurlSettings.MaxTime"/>
            </summary>
        </member>
        <member name="P:Cake.Curl.CurlSettings.RetryOnConnectionRefused">
            <summary>
            Gets or sets a value indicating whether curl should consider <code>ECONNREFUSED</code> as a failed operation
            before retrying. The default value is <see langword="false"/>.
            <seealso cref="P:Cake.Curl.CurlSettings.RetryCount"/>
            </summary>
        </member>
        <member name="P:Cake.Curl.CurlSettings.MaxTime">
            <summary>
            Gets or sets the maximum amount of time the operation is allowed to take.
            <seealso cref="P:Cake.Curl.CurlSettings.ConnectionTimeout"/>
            </summary>
            <remarks>
            According to <a href="https://curl.haxx.se/docs/manpage.html#-m">curl's documentation</a>, this option is useful
            to prevent batch jobs from hanging indefinitely.
            As of version <em>7.32.0</em>, it's possible to specify decimal values (e.g <code>0.5</code> seconds), but
            keep in mind that the timeout accuracy will decrease as the number of decimal digits increases.
            </remarks>
        </member>
        <member name="P:Cake.Curl.CurlSettings.ConnectionTimeout">
            <summary>
            Gets or sets the maximum amount of time the connection to the remote machine is allowed to take.
            <seealso cref="P:Cake.Curl.CurlSettings.MaxTime"/>
            </summary>
            <remarks>
            According to <a href="https://curl.haxx.se/docs/manpage.html#--connect-timeout">curl's documentation</a>,
            this option only limits the <em>connection</em> time, while <see cref="P:Cake.Curl.CurlSettings.MaxTime"/> applies to the whole operation.
            As of version <em>7.32.0</em>, it's possible to specify decimal values (e.g <code>0.5</code> seconds), but
            keep in mind that the timeout accuracy will decrease as the number of decimal digits increases.
            </remarks>
        </member>
        <member name="T:Cake.Curl.CurlUploadRunner">
            <summary>
            The curl runner to upload files to a remote URL.
            </summary>
        </member>
        <member name="M:Cake.Curl.CurlUploadRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.Tooling.IToolLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Curl.CurlUploadRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="tools">The tool locator.</param>
        </member>
        <member name="M:Cake.Curl.CurlUploadRunner.UploadFile(Cake.Core.IO.FilePath,System.Uri,Cake.Curl.CurlSettings)">
            <summary>
            Uploads a file to a remote host using the specified URL.
            </summary>
            <param name="filePath">The path to the file to upload.</param>
            <param name="host">The URL to the remote host.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Curl.CurlUploadRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="M:Cake.Curl.CurlUploadRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
    </members>
</doc>
